


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                          PUBLIC FUNCTI
                       ONS
    3 00000000         ;*******************************************************
                       *************************************************
    4 00000000         
    5 00000000                 EXPORT           OSStartHighRdy
    6 00000000                 EXPORT           OSCtxSw
    7 00000000                 EXPORT           OSIntCtxSw
    8 00000000                 EXPORT           OS_CPU_SR_Save
    9 00000000                 EXPORT           OS_CPU_SR_Restore
   10 00000000                 EXPORT           OS_CPU_PendSVHandler
   11 00000000         
   12 00000000                 EXTERN           OSRunning
   13 00000000                 EXTERN           OSPrioCur
   14 00000000                 EXTERN           OSPrioHighRdy
   15 00000000                 EXTERN           OSTCBCur
   16 00000000                 EXTERN           OSTCBHighRdy
   17 00000000                 EXTERN           OSTaskSwHook
   18 00000000         
   19 00000000                 IF               {FPU} != "SoftVFP"
   20 00000000                 EXPORT           OS_CPU_FP_Reg_Push
   21 00000000                 EXPORT           OS_CPU_FP_Reg_Pop
   22 00000000                 ENDIF
   23 00000000         
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         ;                                               EQUATES
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         
   28 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   29 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   30 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   31 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   32 00000000         
   33 00000000         
   34 00000000         ;*******************************************************
                       *************************************************
   35 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   36 00000000         ;*******************************************************
                       *************************************************
   37 00000000         
   38 00000000                 PRESERVE8



ARM Macro Assembler    Page 2 


   39 00000000         
   40 00000000                 AREA             |.text|, CODE, READONLY
   41 00000000                 THUMB
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   45 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   46 00000000         ;
   47 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   48 00000000         ;
   49 00000000         ;           2) Pseudo-code is:
   50 00000000         ;              a) Get FPSCR register value;
   51 00000000         ;              b) Push value on process stack;
   52 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   53 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000                 IF               {FPU} != "SoftVFP"
   57 00000000         
   58 00000000         OS_CPU_FP_Reg_Push
   59 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   60 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   61 00000006         
   62 00000006 EEF1 1A10       VMRS             R1, FPSCR
   63 0000000A F840 1D04       STR              R1, [R0, #-4]!
   64 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
   65 00000012 4927            LDR              R1, =OSTCBCur
   66 00000014 680A            LDR              R2, [R1]
   67 00000016 6010            STR              R0, [R2]
   68 00000018         OS_CPU_FP_nosave
   69 00000018 4770            BX               LR
   70 0000001A         
   71 0000001A                 ENDIF
   72 0000001A         
   73 0000001A         
   74 0000001A         ;*******************************************************
                       *************************************************
   75 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
   76 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
   77 0000001A         ;
   78 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
   79 0000001A         ;
   80 0000001A         ;           2) Pseudo-code is:
   81 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
   82 0000001A         ;              b) Restore FPSCR reg value
   83 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer



ARM Macro Assembler    Page 3 


                        of new proces stack;
   84 0000001A         ;*******************************************************
                       *************************************************
   85 0000001A         
   86 0000001A                 IF               {FPU} != "SoftVFP"
   87 0000001A         
   88 0000001A         OS_CPU_FP_Reg_Pop
   89 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
   90 0000001E C802            LDMIA            R0!, {R1}
   91 00000020 EEE1 1A10       VMSR             FPSCR, R1
   92 00000024 4923            LDR              R1, =OSTCBHighRdy
   93 00000026 680A            LDR              R2, [R1]
   94 00000028 6010            STR              R0, [R2]
   95 0000002A 4770            BX               LR
   96 0000002C         
   97 0000002C                 ENDIF
   98 0000002C         
   99 0000002C         ;*******************************************************
                       *************************************************
  100 0000002C         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  101 0000002C         ;
  102 0000002C         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  103 0000002C         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  104 0000002C         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
  105 0000002C         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  106 0000002C         ;              into the CPU's status register.
  107 0000002C         ;
  108 0000002C         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
  109 0000002C         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
  110 0000002C         ;
  111 0000002C         ;
  112 0000002C         ; Note(s)    : 1) These functions are used in general li
                       ke this:
  113 0000002C         ;
  114 0000002C         ;                 void Task (void *p_arg)
  115 0000002C         ;                 {
  116 0000002C         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
  117 0000002C         ;                     OS_CPU_SR  cpu_sr;
  118 0000002C         ;                 #endif
  119 0000002C         ;
  120 0000002C         ;                          :
  121 0000002C         ;                          :
  122 0000002C         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  123 0000002C         ;                          :
  124 0000002C         ;                          :
  125 0000002C         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  126 0000002C         ;                          :
  127 0000002C         ;                          :
  128 0000002C         ;                 }
  129 0000002C         ;*******************************************************



ARM Macro Assembler    Page 4 


                       *************************************************
  130 0000002C         
  131 0000002C         OS_CPU_SR_Save
  132 0000002C F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  133 00000030 B672            CPSID            I
  134 00000032 4770            BX               LR
  135 00000034         
  136 00000034         OS_CPU_SR_Restore
  137 00000034 F380 8810       MSR              PRIMASK, R0
  138 00000038 4770            BX               LR
  139 0000003A         
  140 0000003A         ;*******************************************************
                       *************************************************
  141 0000003A         ;                                         START MULTITAS
                       KING
  142 0000003A         ;                                      void OSStartHighR
                       dy(void)
  143 0000003A         ;
  144 0000003A         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  145 0000003A         ;              the first task to start.
  146 0000003A         ;
  147 0000003A         ;           2) OSStartHighRdy() MUST:
  148 0000003A         ;              a) Setup PendSV exception priority to low
                       est;
  149 0000003A         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  150 0000003A         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  151 0000003A         ;              d) Set OSRunning to TRUE;
  152 0000003A         ;              e) Trigger PendSV exception;
  153 0000003A         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  154 0000003A         ;*******************************************************
                       *************************************************
  155 0000003A         
  156 0000003A         OSStartHighRdy
  157 0000003A 481F            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  158 0000003C F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  159 00000040 7001            STRB             R1, [R0]
  160 00000042         
  161 00000042 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  162 00000044 F380 8809       MSR              PSP, R0
  163 00000048         
  164 00000048 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  165 0000004A 2101            MOVS             R1, #1
  166 0000004C 7001            STRB             R1, [R0]
  167 0000004E         
  168 0000004E 481C            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)



ARM Macro Assembler    Page 5 


  169 00000050 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  170 00000054 6001            STR              R1, [R0]
  171 00000056         
  172 00000056 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  173 00000058         
  174 00000058         OSCtxSw
  175 00000058 4819            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  176 0000005A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  177 0000005E 6001            STR              R1, [R0]
  178 00000060 4770            BX               LR
  179 00000062         
  180 00000062         ;*******************************************************
                       *************************************************
  181 00000062         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  182 00000062         ;
  183 00000062         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  184 00000062         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  185 00000062         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  186 00000062         ;*******************************************************
                       *************************************************
  187 00000062         
  188 00000062         OSIntCtxSw
  189 00000062 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  190 00000064 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  191 00000068 6001            STR              R1, [R0]
  192 0000006A 4770            BX               LR
  193 0000006C         
  194 0000006C         ;*******************************************************
                       *************************************************
  195 0000006C         ;                                       HANDLE PendSV EX
                       CEPTION
  196 0000006C         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  197 0000006C         ;
  198 0000006C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  199 0000006C         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  200 0000006C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  201 0000006C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  202 0000006C         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  203 0000006C         ;              a thread or occurs due to an interrupt or
                        exception.
  204 0000006C         ;



ARM Macro Assembler    Page 6 


  205 0000006C         ;           2) Pseudo-code is:
  206 0000006C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  207 0000006C         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  208 0000006C         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  209 0000006C         ;              d) Call OSTaskSwHook();
  210 0000006C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  211 0000006C         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  212 0000006C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  213 0000006C         ;              h) Restore R4-R11 from new process stack;
                       
  214 0000006C         ;              i) Perform exception return which will re
                       store remaining context.
  215 0000006C         ;
  216 0000006C         ;           3) On entry into PendSV handler:
  217 0000006C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  218 0000006C         ;                 xPSR, PC, LR, R12, R0-R3
  219 0000006C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  220 0000006C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  221 0000006C         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  222 0000006C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  223 0000006C         ;
  224 0000006C         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  225 0000006C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  226 0000006C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  227 0000006C         ;*******************************************************
                       *************************************************
  228 0000006C         
  229 0000006C         OS_CPU_PendSVHandler
  230 0000006C B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  231 0000006E F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  232 00000072 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  233 00000074         
  234 00000074 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  235 00000076 E880 0FF0       STM              R0, {R4-R11}
  236 0000007A         
  237 0000007A 490D            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;



ARM Macro Assembler    Page 7 


  238 0000007C 6809            LDR              R1, [R1]
  239 0000007E 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  240 00000080         
  241 00000080         ; At this point, entire context of process has been save
                       d
  242 00000080         OS_CPU_PendSVHandler_nosave
  243 00000080 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  244 00000082 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  245 00000084 4780            BLX              R0
  246 00000086 F85D EB04       POP              {R14}
  247 0000008A         
  248 0000008A 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  249 0000008C 490F            LDR              R1, =OSPrioHighRdy
  250 0000008E 780A            LDRB             R2, [R1]
  251 00000090 7002            STRB             R2, [R0]
  252 00000092         
  253 00000092 4807            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  254 00000094 4907            LDR              R1, =OSTCBHighRdy
  255 00000096 680A            LDR              R2, [R1]
  256 00000098 6002            STR              R2, [R0]
  257 0000009A         
  258 0000009A 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  259 0000009C E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  260 000000A0 3020            ADDS             R0, R0, #0x20
  261 000000A2 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  262 000000A6 F04E 0EF4       ORR              LR, LR, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  263 000000AA B662            CPSIE            I
  264 000000AC 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  265 000000AE BF00            NOP
  266 000000B0                 END
              00000000 
              00000000 
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -I.\RTE\Compiler
 -I.\RTE\_ucos_stm32f4 -I"D:\Program Files\ARM\Packs\ARM\CMSIS\5.9.0\CMSIS\Core
\Include" -I"D:\Program Files\ARM\Packs\Keil\ARM_Compiler\1.7.2\Include" -I"D:\
Program Files\ARM\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSIS\Device\ST\STM32
F4xx\Include" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SE



ARM Macro Assembler    Page 8 


TA 538" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --predefine
="_RTE_ SETA 1" --list=.\listings\os_cpu_a.lst ..\ucos_II\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 40 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000058

Symbol: OSCtxSw
   Definitions
      At line 174 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 6 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000062

Symbol: OSIntCtxSw
   Definitions
      At line 188 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 7 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 0000003A

Symbol: OSStartHighRdy
   Definitions
      At line 156 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 5 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 88 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 21 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 58 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 20 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave
   Definitions
      At line 68 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 60 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_nosave used once
OS_CPU_PendSVHandler 0000006C

Symbol: OS_CPU_PendSVHandler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 229 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 10 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000080

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 242 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 232 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000034

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 136 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 9 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 0000002C

Symbol: OS_CPU_SR_Save
   Definitions
      At line 131 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 8 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 28 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 168 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 175 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 189 in file ..\ucos_II\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 31 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 169 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 176 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 190 in file ..\ucos_II\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 30 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 158 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 29 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 157 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 13 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 248 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 14 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 249 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 12 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 164 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 15 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 65 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 237 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 253 in file ..\ucos_II\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 16 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 92 in file ..\ucos_II\Ports\os_cpu_a.asm
      At line 254 in file ..\ucos_II\Ports\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 17 in file ..\ucos_II\Ports\os_cpu_a.asm
   Uses
      At line 244 in file ..\ucos_II\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
6 symbols
358 symbols in table
